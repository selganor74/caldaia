!function(I,m){"object"==typeof exports&&"object"==typeof module?module.exports=m():"function"==typeof define&&define.amd?define([],m):"object"==typeof exports?exports.signalR=m():I.signalR=m()}(self,()=>(()=>{"use strict";var C={d:(r,e)=>{for(var t in e)C.o(e,t)&&!C.o(r,t)&&Object.defineProperty(r,t,{enumerable:!0,get:e[t]})}};C.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch{if("object"==typeof window)return window}}(),C.o=(r,e)=>Object.prototype.hasOwnProperty.call(r,e),C.r=r=>{typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(r,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(r,"__esModule",{value:!0})};var s,r,I={};C.r(I),C.d(I,{AbortError:()=>y,DefaultHttpClient:()=>O,HttpClient:()=>T,HttpError:()=>m,HttpResponse:()=>H,HttpTransportType:()=>p,HubConnection:()=>x,HubConnectionBuilder:()=>Ce,HubConnectionState:()=>d,JsonHubProtocol:()=>X,LogLevel:()=>s,MessageType:()=>u,NullLogger:()=>k,Subject:()=>L,TimeoutError:()=>D,TransferFormat:()=>w,VERSION:()=>N});class m extends Error{constructor(e,t){const n=new.target.prototype;super(`${e}: Status code '${t}'`),this.statusCode=t,this.__proto__=n}}class D extends Error{constructor(e="A timeout occurred."){const t=new.target.prototype;super(e),this.__proto__=t}}class y extends Error{constructor(e="An abort occurred."){const t=new.target.prototype;super(e),this.__proto__=t}}class V extends Error{constructor(e,t){const n=new.target.prototype;super(e),this.transport=t,this.errorType="UnsupportedTransportError",this.__proto__=n}}class K extends Error{constructor(e,t){const n=new.target.prototype;super(e),this.transport=t,this.errorType="DisabledTransportError",this.__proto__=n}}class G extends Error{constructor(e,t){const n=new.target.prototype;super(e),this.transport=t,this.errorType="FailedToStartTransportError",this.__proto__=n}}class Q extends Error{constructor(e){const t=new.target.prototype;super(e),this.errorType="FailedToNegotiateWithServerError",this.__proto__=t}}class Y extends Error{constructor(e,t){const n=new.target.prototype;super(e),this.innerErrors=t,this.__proto__=n}}class H{constructor(e,t,n){this.statusCode=e,this.statusText=t,this.content=n}}class T{get(e,t){return this.send({...t,method:"GET",url:e})}post(e,t){return this.send({...t,method:"POST",url:e})}delete(e,t){return this.send({...t,method:"DELETE",url:e})}getCookieString(e){return""}}(r=s||(s={}))[r.Trace=0]="Trace",r[r.Debug=1]="Debug",r[r.Information=2]="Information",r[r.Warning=3]="Warning",r[r.Error=4]="Error",r[r.Critical=5]="Critical",r[r.None=6]="None";class k{constructor(){}log(e,t){}}k.instance=new k;const N="7.0.0";class f{static isRequired(e,t){if(null==e)throw new Error(`The '${t}' argument is required.`)}static isNotEmpty(e,t){if(!e||e.match(/^\s*$/))throw new Error(`The '${t}' argument should not be empty.`)}static isIn(e,t,n){if(!(e in t))throw new Error(`Unknown ${n} value: ${e}.`)}}class _{static get isBrowser(){return"object"==typeof window&&"object"==typeof window.document}static get isWebWorker(){return"object"==typeof self&&"importScripts"in self}static get isReactNative(){return"object"==typeof window&&typeof window.document>"u"}static get isNode(){return!this.isBrowser&&!this.isWebWorker&&!this.isReactNative}}function P(r,e){let t="";return $(r)?(t=`Binary data of length ${r.byteLength}`,e&&(t+=`. Content: '${function Z(r){const e=new Uint8Array(r);let t="";return e.forEach(n=>{t+=`0x${n<16?"0":""}${n.toString(16)} `}),t.substr(0,t.length-1)}(r)}'`)):"string"==typeof r&&(t=`String data of length ${r.length}`,e&&(t+=`. Content: '${r}'`)),t}function $(r){return r&&typeof ArrayBuffer<"u"&&(r instanceof ArrayBuffer||r.constructor&&"ArrayBuffer"===r.constructor.name)}async function j(r,e,t,n,o,i){const c={},[l,a]=E();c[l]=a,r.log(s.Trace,`(${e} transport) sending data. ${P(o,i.logMessageContent)}.`);const h=$(o)?"arraybuffer":"text",g=await t.post(n,{content:o,headers:{...c,...i.headers},responseType:h,timeout:i.timeout,withCredentials:i.withCredentials});r.log(s.Trace,`(${e} transport) request complete. Response status: ${g.statusCode}.`)}class ee{constructor(e,t){this._subject=e,this._observer=t}dispose(){const e=this._subject.observers.indexOf(this._observer);e>-1&&this._subject.observers.splice(e,1),0===this._subject.observers.length&&this._subject.cancelCallback&&this._subject.cancelCallback().catch(t=>{})}}class R{constructor(e){this._minLevel=e,this.out=console}log(e,t){if(e>=this._minLevel){const n=`[${(new Date).toISOString()}] ${s[e]}: ${t}`;switch(e){case s.Critical:case s.Error:this.out.error(n);break;case s.Warning:this.out.warn(n);break;case s.Information:this.out.info(n);break;default:this.out.log(n)}}}}function E(){let r="X-SignalR-User-Agent";return _.isNode&&(r="User-Agent"),[r,te(N,ne(),_.isNode?"NodeJS":"Browser",oe())]}function te(r,e,t,n){let o="Microsoft SignalR/";const i=r.split(".");return o+=`${i[0]}.${i[1]}`,o+=` (${r}; `,o+=e&&""!==e?`${e}; `:"Unknown OS; ",o+=`${t}`,o+=n?`; ${n}`:"; Unknown Runtime Version",o+=")",o}function ne(){if(!_.isNode)return"";switch(process.platform){case"win32":return"Windows NT";case"darwin":return"macOS";case"linux":return"Linux";default:return process.platform}}function oe(){if(_.isNode)return process.versions.node}function U(r){return r.stack?r.stack:r.message?r.message:`${r}`}class ie extends T{constructor(e){if(super(),this._logger=e,typeof fetch>"u"){const t=require;this._jar=new(t("tough-cookie").CookieJar),this._fetchType=t("node-fetch"),this._fetchType=t("fetch-cookie")(this._fetchType,this._jar)}else this._fetchType=fetch.bind(function se(){if(typeof globalThis<"u")return globalThis;if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof C.g<"u")return C.g;throw new Error("could not find global")}());if(typeof AbortController>"u"){const t=require;this._abortControllerType=t("abort-controller")}else this._abortControllerType=AbortController}async send(e){if(e.abortSignal&&e.abortSignal.aborted)throw new y;if(!e.method)throw new Error("No method defined.");if(!e.url)throw new Error("No url defined.");const t=new this._abortControllerType;let n;e.abortSignal&&(e.abortSignal.onabort=()=>{t.abort(),n=new y});let i,o=null;e.timeout&&(o=setTimeout(()=>{t.abort(),this._logger.log(s.Warning,"Timeout from HTTP request."),n=new D},e.timeout)),""===e.content&&(e.content=void 0),e.content&&(e.headers=e.headers||{},e.headers["Content-Type"]=$(e.content)?"application/octet-stream":"text/plain;charset=UTF-8");try{i=await this._fetchType(e.url,{body:e.content,cache:"no-cache",credentials:!0===e.withCredentials?"include":"same-origin",headers:{"X-Requested-With":"XMLHttpRequest",...e.headers},method:e.method,mode:"cors",redirect:"follow",signal:t.signal})}catch(a){throw n||(this._logger.log(s.Warning,`Error from HTTP request. ${a}.`),a)}finally{o&&clearTimeout(o),e.abortSignal&&(e.abortSignal.onabort=null)}if(!i.ok){const a=await M(i,"text");throw new m(a||i.statusText,i.status)}const l=await M(i,e.responseType);return new H(i.status,i.statusText,l)}getCookieString(e){let t="";return _.isNode&&this._jar&&this._jar.getCookies(e,(n,o)=>t=o.join("; ")),t}}function M(r,e){let t;switch(e){case"arraybuffer":t=r.arrayBuffer();break;case"text":default:t=r.text();break;case"blob":case"document":case"json":throw new Error(`${e} is not supported.`)}return t}class ce extends T{constructor(e){super(),this._logger=e}send(e){return e.abortSignal&&e.abortSignal.aborted?Promise.reject(new y):e.method?e.url?new Promise((t,n)=>{const o=new XMLHttpRequest;o.open(e.method,e.url,!0),o.withCredentials=void 0===e.withCredentials||e.withCredentials,o.setRequestHeader("X-Requested-With","XMLHttpRequest"),""===e.content&&(e.content=void 0),e.content&&($(e.content)?o.setRequestHeader("Content-Type","application/octet-stream"):o.setRequestHeader("Content-Type","text/plain;charset=UTF-8"));const i=e.headers;i&&Object.keys(i).forEach(c=>{o.setRequestHeader(c,i[c])}),e.responseType&&(o.responseType=e.responseType),e.abortSignal&&(e.abortSignal.onabort=()=>{o.abort(),n(new y)}),e.timeout&&(o.timeout=e.timeout),o.onload=()=>{e.abortSignal&&(e.abortSignal.onabort=null),o.status>=200&&o.status<300?t(new H(o.status,o.statusText,o.response||o.responseText)):n(new m(o.response||o.responseText||o.statusText,o.status))},o.onerror=()=>{this._logger.log(s.Warning,`Error from HTTP request. ${o.status}: ${o.statusText}.`),n(new m(o.statusText,o.status))},o.ontimeout=()=>{this._logger.log(s.Warning,"Timeout from HTTP request."),n(new D)},o.send(e.content)}):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))}}class O extends T{constructor(e){if(super(),typeof fetch<"u"||_.isNode)this._httpClient=new ie(e);else{if(!(typeof XMLHttpRequest<"u"))throw new Error("No usable HttpClient found.");this._httpClient=new ce(e)}}send(e){return e.abortSignal&&e.abortSignal.aborted?Promise.reject(new y):e.method?e.url?this._httpClient.send(e):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))}getCookieString(e){return this._httpClient.getCookieString(e)}}class b{static write(e){return`${e}${b.RecordSeparator}`}static parse(e){if(e[e.length-1]!==b.RecordSeparator)throw new Error("Message is incomplete.");const t=e.split(b.RecordSeparator);return t.pop(),t}}b.RecordSeparatorCode=30,b.RecordSeparator=String.fromCharCode(b.RecordSeparatorCode);class ae{writeHandshakeRequest(e){return b.write(JSON.stringify(e))}parseHandshakeResponse(e){let t,n;if($(e)){const l=new Uint8Array(e),a=l.indexOf(b.RecordSeparatorCode);if(-1===a)throw new Error("Message is incomplete.");const h=a+1;t=String.fromCharCode.apply(null,Array.prototype.slice.call(l.slice(0,h))),n=l.byteLength>h?l.slice(h).buffer:null}else{const l=e,a=l.indexOf(b.RecordSeparator);if(-1===a)throw new Error("Message is incomplete.");const h=a+1;t=l.substring(0,h),n=l.length>h?l.substring(h):null}const o=b.parse(t),i=JSON.parse(o[0]);if(i.type)throw new Error("Expected a handshake response from the server.");return[n,i]}}var u,d;!function(r){r[r.Invocation=1]="Invocation",r[r.StreamItem=2]="StreamItem",r[r.Completion=3]="Completion",r[r.StreamInvocation=4]="StreamInvocation",r[r.CancelInvocation=5]="CancelInvocation",r[r.Ping=6]="Ping",r[r.Close=7]="Close"}(u||(u={}));class L{constructor(){this.observers=[]}next(e){for(const t of this.observers)t.next(e)}error(e){for(const t of this.observers)t.error&&t.error(e)}complete(){for(const e of this.observers)e.complete&&e.complete()}subscribe(e){return this.observers.push(e),new ee(this,e)}}!function(r){r.Disconnected="Disconnected",r.Connecting="Connecting",r.Connected="Connected",r.Disconnecting="Disconnecting",r.Reconnecting="Reconnecting"}(d||(d={}));class x{constructor(e,t,n,o){this._nextKeepAlive=0,this._freezeEventListener=()=>{this._logger.log(s.Warning,"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://docs.microsoft.com/aspnet/core/signalr/javascript-client#bsleep")},f.isRequired(e,"connection"),f.isRequired(t,"logger"),f.isRequired(n,"protocol"),this.serverTimeoutInMilliseconds=3e4,this.keepAliveIntervalInMilliseconds=15e3,this._logger=t,this._protocol=n,this.connection=e,this._reconnectPolicy=o,this._handshakeProtocol=new ae,this.connection.onreceive=i=>this._processIncomingData(i),this.connection.onclose=i=>this._connectionClosed(i),this._callbacks={},this._methods={},this._closedCallbacks=[],this._reconnectingCallbacks=[],this._reconnectedCallbacks=[],this._invocationId=0,this._receivedHandshakeResponse=!1,this._connectionState=d.Disconnected,this._connectionStarted=!1,this._cachedPingMessage=this._protocol.writeMessage({type:u.Ping})}static create(e,t,n,o){return new x(e,t,n,o)}get state(){return this._connectionState}get connectionId(){return this.connection&&this.connection.connectionId||null}get baseUrl(){return this.connection.baseUrl||""}set baseUrl(e){if(this._connectionState!==d.Disconnected&&this._connectionState!==d.Reconnecting)throw new Error("The HubConnection must be in the Disconnected or Reconnecting state to change the url.");if(!e)throw new Error("The HubConnection url must be a valid url.");this.connection.baseUrl=e}start(){return this._startPromise=this._startWithStateTransitions(),this._startPromise}async _startWithStateTransitions(){if(this._connectionState!==d.Disconnected)return Promise.reject(new Error("Cannot start a HubConnection that is not in the 'Disconnected' state."));this._connectionState=d.Connecting,this._logger.log(s.Debug,"Starting HubConnection.");try{await this._startInternal(),_.isBrowser&&window.document.addEventListener("freeze",this._freezeEventListener),this._connectionState=d.Connected,this._connectionStarted=!0,this._logger.log(s.Debug,"HubConnection connected successfully.")}catch(e){return this._connectionState=d.Disconnected,this._logger.log(s.Debug,`HubConnection failed to start successfully because of error '${e}'.`),Promise.reject(e)}}async _startInternal(){this._stopDuringStartError=void 0,this._receivedHandshakeResponse=!1;const e=new Promise((t,n)=>{this._handshakeResolver=t,this._handshakeRejecter=n});await this.connection.start(this._protocol.transferFormat);try{const t={protocol:this._protocol.name,version:this._protocol.version};if(this._logger.log(s.Debug,"Sending handshake request."),await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(t)),this._logger.log(s.Information,`Using HubProtocol '${this._protocol.name}'.`),this._cleanupTimeout(),this._resetTimeoutPeriod(),this._resetKeepAliveInterval(),await e,this._stopDuringStartError)throw this._stopDuringStartError;this.connection.features.inherentKeepAlive||await this._sendMessage(this._cachedPingMessage)}catch(t){throw this._logger.log(s.Debug,`Hub handshake failed with error '${t}' during start(). Stopping HubConnection.`),this._cleanupTimeout(),this._cleanupPingTimer(),await this.connection.stop(t),t}}async stop(){const e=this._startPromise;this._stopPromise=this._stopInternal(),await this._stopPromise;try{await e}catch{}}_stopInternal(e){return this._connectionState===d.Disconnected?(this._logger.log(s.Debug,`Call to HubConnection.stop(${e}) ignored because it is already in the disconnected state.`),Promise.resolve()):this._connectionState===d.Disconnecting?(this._logger.log(s.Debug,`Call to HttpConnection.stop(${e}) ignored because the connection is already in the disconnecting state.`),this._stopPromise):(this._connectionState=d.Disconnecting,this._logger.log(s.Debug,"Stopping HubConnection."),this._reconnectDelayHandle?(this._logger.log(s.Debug,"Connection stopped during reconnect delay. Done reconnecting."),clearTimeout(this._reconnectDelayHandle),this._reconnectDelayHandle=void 0,this._completeClose(),Promise.resolve()):(this._cleanupTimeout(),this._cleanupPingTimer(),this._stopDuringStartError=e||new y("The connection was stopped before the hub handshake could complete."),this.connection.stop(e)))}stream(e,...t){const[n,o]=this._replaceStreamingParams(t),i=this._createStreamInvocation(e,t,o);let c;const l=new L;return l.cancelCallback=()=>{const a=this._createCancelInvocation(i.invocationId);return delete this._callbacks[i.invocationId],c.then(()=>this._sendWithProtocol(a))},this._callbacks[i.invocationId]=(a,h)=>{h?l.error(h):a&&(a.type===u.Completion?a.error?l.error(new Error(a.error)):l.complete():l.next(a.item))},c=this._sendWithProtocol(i).catch(a=>{l.error(a),delete this._callbacks[i.invocationId]}),this._launchStreams(n,c),l}_sendMessage(e){return this._resetKeepAliveInterval(),this.connection.send(e)}_sendWithProtocol(e){return this._sendMessage(this._protocol.writeMessage(e))}send(e,...t){const[n,o]=this._replaceStreamingParams(t),i=this._sendWithProtocol(this._createInvocation(e,t,!0,o));return this._launchStreams(n,i),i}invoke(e,...t){const[n,o]=this._replaceStreamingParams(t),i=this._createInvocation(e,t,!1,o);return new Promise((l,a)=>{this._callbacks[i.invocationId]=(g,S)=>{S?a(S):g&&(g.type===u.Completion?g.error?a(new Error(g.error)):l(g.result):a(new Error(`Unexpected message type: ${g.type}`)))};const h=this._sendWithProtocol(i).catch(g=>{a(g),delete this._callbacks[i.invocationId]});this._launchStreams(n,h)})}on(e,t){!e||!t||(e=e.toLowerCase(),this._methods[e]||(this._methods[e]=[]),-1===this._methods[e].indexOf(t)&&this._methods[e].push(t))}off(e,t){if(!e)return;e=e.toLowerCase();const n=this._methods[e];if(n)if(t){const o=n.indexOf(t);-1!==o&&(n.splice(o,1),0===n.length&&delete this._methods[e])}else delete this._methods[e]}onclose(e){e&&this._closedCallbacks.push(e)}onreconnecting(e){e&&this._reconnectingCallbacks.push(e)}onreconnected(e){e&&this._reconnectedCallbacks.push(e)}_processIncomingData(e){if(this._cleanupTimeout(),this._receivedHandshakeResponse||(e=this._processHandshakeResponse(e),this._receivedHandshakeResponse=!0),e){const t=this._protocol.parseMessages(e,this._logger);for(const n of t)switch(n.type){case u.Invocation:this._invokeClientMethod(n);break;case u.StreamItem:case u.Completion:{const o=this._callbacks[n.invocationId];if(o){n.type===u.Completion&&delete this._callbacks[n.invocationId];try{o(n)}catch(i){this._logger.log(s.Error,`Stream callback threw error: ${U(i)}`)}}break}case u.Ping:break;case u.Close:{this._logger.log(s.Information,"Close message received from server.");const o=n.error?new Error("Server returned an error on close: "+n.error):void 0;!0===n.allowReconnect?this.connection.stop(o):this._stopPromise=this._stopInternal(o);break}default:this._logger.log(s.Warning,`Invalid message type: ${n.type}.`)}}this._resetTimeoutPeriod()}_processHandshakeResponse(e){let t,n;try{[n,t]=this._handshakeProtocol.parseHandshakeResponse(e)}catch(o){const i="Error parsing handshake response: "+o;this._logger.log(s.Error,i);const c=new Error(i);throw this._handshakeRejecter(c),c}if(t.error){const o="Server returned handshake error: "+t.error;this._logger.log(s.Error,o);const i=new Error(o);throw this._handshakeRejecter(i),i}return this._logger.log(s.Debug,"Server handshake complete."),this._handshakeResolver(),n}_resetKeepAliveInterval(){this.connection.features.inherentKeepAlive||(this._nextKeepAlive=(new Date).getTime()+this.keepAliveIntervalInMilliseconds,this._cleanupPingTimer())}_resetTimeoutPeriod(){if(!(this.connection.features&&this.connection.features.inherentKeepAlive||(this._timeoutHandle=setTimeout(()=>this.serverTimeout(),this.serverTimeoutInMilliseconds),void 0!==this._pingServerHandle))){let e=this._nextKeepAlive-(new Date).getTime();e<0&&(e=0),this._pingServerHandle=setTimeout(async()=>{if(this._connectionState===d.Connected)try{await this._sendMessage(this._cachedPingMessage)}catch{this._cleanupPingTimer()}},e)}}serverTimeout(){this.connection.stop(new Error("Server timeout elapsed without receiving a message from the server."))}async _invokeClientMethod(e){const t=e.target.toLowerCase(),n=this._methods[t];if(!n)return this._logger.log(s.Warning,`No client method with the name '${t}' found.`),void(e.invocationId&&(this._logger.log(s.Warning,`No result given for '${t}' method and invocation ID '${e.invocationId}'.`),await this._sendWithProtocol(this._createCompletionMessage(e.invocationId,"Client didn't provide a result.",null))));const o=n.slice(),i=!!e.invocationId;let c,l,a;for(const h of o)try{const g=c;c=await h.apply(this,e.arguments),i&&c&&g&&(this._logger.log(s.Error,`Multiple results provided for '${t}'. Sending error to server.`),a=this._createCompletionMessage(e.invocationId,"Client provided multiple results.",null)),l=void 0}catch(g){l=g,this._logger.log(s.Error,`A callback for the method '${t}' threw error '${g}'.`)}a?await this._sendWithProtocol(a):i?(l?a=this._createCompletionMessage(e.invocationId,`${l}`,null):void 0!==c?a=this._createCompletionMessage(e.invocationId,null,c):(this._logger.log(s.Warning,`No result given for '${t}' method and invocation ID '${e.invocationId}'.`),a=this._createCompletionMessage(e.invocationId,"Client didn't provide a result.",null)),await this._sendWithProtocol(a)):c&&this._logger.log(s.Error,`Result given for '${t}' method but server is not expecting a result.`)}_connectionClosed(e){this._logger.log(s.Debug,`HubConnection.connectionClosed(${e}) called while in state ${this._connectionState}.`),this._stopDuringStartError=this._stopDuringStartError||e||new y("The underlying connection was closed before the hub handshake could complete."),this._handshakeResolver&&this._handshakeResolver(),this._cancelCallbacksWithError(e||new Error("Invocation canceled due to the underlying connection being closed.")),this._cleanupTimeout(),this._cleanupPingTimer(),this._connectionState===d.Disconnecting?this._completeClose(e):this._connectionState===d.Connected&&this._reconnectPolicy?this._reconnect(e):this._connectionState===d.Connected&&this._completeClose(e)}_completeClose(e){if(this._connectionStarted){this._connectionState=d.Disconnected,this._connectionStarted=!1,_.isBrowser&&window.document.removeEventListener("freeze",this._freezeEventListener);try{this._closedCallbacks.forEach(t=>t.apply(this,[e]))}catch(t){this._logger.log(s.Error,`An onclose callback called with error '${e}' threw error '${t}'.`)}}}async _reconnect(e){const t=Date.now();let n=0,o=void 0!==e?e:new Error("Attempting to reconnect due to a unknown error."),i=this._getNextRetryDelay(n++,0,o);if(null===i)return this._logger.log(s.Debug,"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt."),void this._completeClose(e);if(this._connectionState=d.Reconnecting,this._logger.log(s.Information,e?`Connection reconnecting because of error '${e}'.`:"Connection reconnecting."),0!==this._reconnectingCallbacks.length){try{this._reconnectingCallbacks.forEach(c=>c.apply(this,[e]))}catch(c){this._logger.log(s.Error,`An onreconnecting callback called with error '${e}' threw error '${c}'.`)}if(this._connectionState!==d.Reconnecting)return void this._logger.log(s.Debug,"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.")}for(;null!==i;){if(this._logger.log(s.Information,`Reconnect attempt number ${n} will start in ${i} ms.`),await new Promise(c=>{this._reconnectDelayHandle=setTimeout(c,i)}),this._reconnectDelayHandle=void 0,this._connectionState!==d.Reconnecting)return void this._logger.log(s.Debug,"Connection left the reconnecting state during reconnect delay. Done reconnecting.");try{if(await this._startInternal(),this._connectionState=d.Connected,this._logger.log(s.Information,"HubConnection reconnected successfully."),0!==this._reconnectedCallbacks.length)try{this._reconnectedCallbacks.forEach(c=>c.apply(this,[this.connection.connectionId]))}catch(c){this._logger.log(s.Error,`An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${c}'.`)}return}catch(c){if(this._logger.log(s.Information,`Reconnect attempt failed because of error '${c}'.`),this._connectionState!==d.Reconnecting)return this._logger.log(s.Debug,`Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`),void(this._connectionState===d.Disconnecting&&this._completeClose());o=c instanceof Error?c:new Error(c.toString()),i=this._getNextRetryDelay(n++,Date.now()-t,o)}}this._logger.log(s.Information,`Reconnect retries have been exhausted after ${Date.now()-t} ms and ${n} failed attempts. Connection disconnecting.`),this._completeClose()}_getNextRetryDelay(e,t,n){try{return this._reconnectPolicy.nextRetryDelayInMilliseconds({elapsedMilliseconds:t,previousRetryCount:e,retryReason:n})}catch(o){return this._logger.log(s.Error,`IRetryPolicy.nextRetryDelayInMilliseconds(${e}, ${t}) threw error '${o}'.`),null}}_cancelCallbacksWithError(e){const t=this._callbacks;this._callbacks={},Object.keys(t).forEach(n=>{const o=t[n];try{o(null,e)}catch(i){this._logger.log(s.Error,`Stream 'error' callback called with '${e}' threw error: ${U(i)}`)}})}_cleanupPingTimer(){this._pingServerHandle&&(clearTimeout(this._pingServerHandle),this._pingServerHandle=void 0)}_cleanupTimeout(){this._timeoutHandle&&clearTimeout(this._timeoutHandle)}_createInvocation(e,t,n,o){if(n)return 0!==o.length?{arguments:t,streamIds:o,target:e,type:u.Invocation}:{arguments:t,target:e,type:u.Invocation};{const i=this._invocationId;return this._invocationId++,0!==o.length?{arguments:t,invocationId:i.toString(),streamIds:o,target:e,type:u.Invocation}:{arguments:t,invocationId:i.toString(),target:e,type:u.Invocation}}}_launchStreams(e,t){if(0!==e.length){t||(t=Promise.resolve());for(const n in e)e[n].subscribe({complete:()=>{t=t.then(()=>this._sendWithProtocol(this._createCompletionMessage(n)))},error:o=>{let i;i=o instanceof Error?o.message:o&&o.toString?o.toString():"Unknown error",t=t.then(()=>this._sendWithProtocol(this._createCompletionMessage(n,i)))},next:o=>{t=t.then(()=>this._sendWithProtocol(this._createStreamItemMessage(n,o)))}})}}_replaceStreamingParams(e){const t=[],n=[];for(let o=0;o<e.length;o++){const i=e[o];if(this._isObservable(i)){const c=this._invocationId;this._invocationId++,t[c]=i,n.push(c.toString()),e.splice(o,1)}}return[t,n]}_isObservable(e){return e&&e.subscribe&&"function"==typeof e.subscribe}_createStreamInvocation(e,t,n){const o=this._invocationId;return this._invocationId++,0!==n.length?{arguments:t,invocationId:o.toString(),streamIds:n,target:e,type:u.StreamInvocation}:{arguments:t,invocationId:o.toString(),target:e,type:u.StreamInvocation}}_createCancelInvocation(e){return{invocationId:e,type:u.CancelInvocation}}_createStreamItemMessage(e,t){return{invocationId:e,item:t,type:u.StreamItem}}_createCompletionMessage(e,t,n){return t?{error:t,invocationId:e,type:u.Completion}:{invocationId:e,result:n,type:u.Completion}}}const ge=[0,2e3,1e4,3e4,null];class B{constructor(e){this._retryDelays=void 0!==e?[...e,null]:ge}nextRetryDelayInMilliseconds(e){return this._retryDelays[e.previousRetryCount]}}class v{}v.Authorization="Authorization",v.Cookie="Cookie";class ue extends T{constructor(e,t){super(),this._innerClient=e,this._accessTokenFactory=t}async send(e){let t=!0;this._accessTokenFactory&&(!this._accessToken||e.url&&e.url.indexOf("/negotiate?")>0)&&(t=!1,this._accessToken=await this._accessTokenFactory()),this._setAuthorizationHeader(e);const n=await this._innerClient.send(e);return t&&401===n.statusCode&&this._accessTokenFactory?(this._accessToken=await this._accessTokenFactory(),this._setAuthorizationHeader(e),await this._innerClient.send(e)):n}_setAuthorizationHeader(e){e.headers||(e.headers={}),this._accessToken?e.headers[v.Authorization]=`Bearer ${this._accessToken}`:this._accessTokenFactory&&e.headers[v.Authorization]&&delete e.headers[v.Authorization]}getCookieString(e){return this._innerClient.getCookieString(e)}}var p,w;!function(r){r[r.None=0]="None",r[r.WebSockets=1]="WebSockets",r[r.ServerSentEvents=2]="ServerSentEvents",r[r.LongPolling=4]="LongPolling"}(p||(p={})),function(r){r[r.Text=1]="Text",r[r.Binary=2]="Binary"}(w||(w={}));class de{constructor(){this._isAborted=!1,this.onabort=null}abort(){this._isAborted||(this._isAborted=!0,this.onabort&&this.onabort())}get signal(){return this}get aborted(){return this._isAborted}}class F{constructor(e,t,n){this._httpClient=e,this._logger=t,this._pollAbort=new de,this._options=n,this._running=!1,this.onreceive=null,this.onclose=null}get pollAborted(){return this._pollAbort.aborted}async connect(e,t){if(f.isRequired(e,"url"),f.isRequired(t,"transferFormat"),f.isIn(t,w,"transferFormat"),this._url=e,this._logger.log(s.Trace,"(LongPolling transport) Connecting."),t===w.Binary&&typeof XMLHttpRequest<"u"&&"string"!=typeof(new XMLHttpRequest).responseType)throw new Error("Binary protocols over XmlHttpRequest not implementing advanced features are not supported.");const[n,o]=E(),i={[n]:o,...this._options.headers},c={abortSignal:this._pollAbort.signal,headers:i,timeout:1e5,withCredentials:this._options.withCredentials};t===w.Binary&&(c.responseType="arraybuffer");const l=`${e}&_=${Date.now()}`;this._logger.log(s.Trace,`(LongPolling transport) polling: ${l}.`);const a=await this._httpClient.get(l,c);200!==a.statusCode?(this._logger.log(s.Error,`(LongPolling transport) Unexpected response code: ${a.statusCode}.`),this._closeError=new m(a.statusText||"",a.statusCode),this._running=!1):this._running=!0,this._receiving=this._poll(this._url,c)}async _poll(e,t){try{for(;this._running;)try{const n=`${e}&_=${Date.now()}`;this._logger.log(s.Trace,`(LongPolling transport) polling: ${n}.`);const o=await this._httpClient.get(n,t);204===o.statusCode?(this._logger.log(s.Information,"(LongPolling transport) Poll terminated by server."),this._running=!1):200!==o.statusCode?(this._logger.log(s.Error,`(LongPolling transport) Unexpected response code: ${o.statusCode}.`),this._closeError=new m(o.statusText||"",o.statusCode),this._running=!1):o.content?(this._logger.log(s.Trace,`(LongPolling transport) data received. ${P(o.content,this._options.logMessageContent)}.`),this.onreceive&&this.onreceive(o.content)):this._logger.log(s.Trace,"(LongPolling transport) Poll timed out, reissuing.")}catch(n){this._running?n instanceof D?this._logger.log(s.Trace,"(LongPolling transport) Poll timed out, reissuing."):(this._closeError=n,this._running=!1):this._logger.log(s.Trace,`(LongPolling transport) Poll errored after shutdown: ${n.message}`)}}finally{this._logger.log(s.Trace,"(LongPolling transport) Polling complete."),this.pollAborted||this._raiseOnClose()}}async send(e){return this._running?j(this._logger,"LongPolling",this._httpClient,this._url,e,this._options):Promise.reject(new Error("Cannot send until the transport is connected"))}async stop(){this._logger.log(s.Trace,"(LongPolling transport) Stopping polling."),this._running=!1,this._pollAbort.abort();try{await this._receiving,this._logger.log(s.Trace,`(LongPolling transport) sending DELETE request to ${this._url}.`);const e={},[t,n]=E();e[t]=n;const o={headers:{...e,...this._options.headers},timeout:this._options.timeout,withCredentials:this._options.withCredentials};await this._httpClient.delete(this._url,o),this._logger.log(s.Trace,"(LongPolling transport) DELETE request sent.")}finally{this._logger.log(s.Trace,"(LongPolling transport) Stop finished."),this._raiseOnClose()}}_raiseOnClose(){if(this.onclose){let e="(LongPolling transport) Firing onclose event.";this._closeError&&(e+=" Error: "+this._closeError),this._logger.log(s.Trace,e),this.onclose(this._closeError)}}}class pe{constructor(e,t,n,o){this._httpClient=e,this._accessToken=t,this._logger=n,this._options=o,this.onreceive=null,this.onclose=null}async connect(e,t){return f.isRequired(e,"url"),f.isRequired(t,"transferFormat"),f.isIn(t,w,"transferFormat"),this._logger.log(s.Trace,"(SSE transport) Connecting."),this._url=e,this._accessToken&&(e+=(e.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(this._accessToken)}`),new Promise((n,o)=>{let c,i=!1;if(t===w.Text){if(_.isBrowser||_.isWebWorker)c=new this._options.EventSource(e,{withCredentials:this._options.withCredentials});else{const l=this._httpClient.getCookieString(e),a={};a.Cookie=l;const[h,g]=E();a[h]=g,c=new this._options.EventSource(e,{withCredentials:this._options.withCredentials,headers:{...a,...this._options.headers}})}try{c.onmessage=l=>{if(this.onreceive)try{this._logger.log(s.Trace,`(SSE transport) data received. ${P(l.data,this._options.logMessageContent)}.`),this.onreceive(l.data)}catch(a){return void this._close(a)}},c.onerror=l=>{i?this._close():o(new Error("EventSource failed to connect. The connection could not be found on the server, either the connection ID is not present on the server, or a proxy is refusing/buffering the connection. If you have multiple servers check that sticky sessions are enabled."))},c.onopen=()=>{this._logger.log(s.Information,`SSE connected to ${this._url}`),this._eventSource=c,i=!0,n()}}catch(l){return void o(l)}}else o(new Error("The Server-Sent Events transport only supports the 'Text' transfer format"))})}async send(e){return this._eventSource?j(this._logger,"SSE",this._httpClient,this._url,e,this._options):Promise.reject(new Error("Cannot send until the transport is connected"))}stop(){return this._close(),Promise.resolve()}_close(e){this._eventSource&&(this._eventSource.close(),this._eventSource=void 0,this.onclose&&this.onclose(e))}}class fe{constructor(e,t,n,o,i,c){this._logger=n,this._accessTokenFactory=t,this._logMessageContent=o,this._webSocketConstructor=i,this._httpClient=e,this.onreceive=null,this.onclose=null,this._headers=c}async connect(e,t){let n;return f.isRequired(e,"url"),f.isRequired(t,"transferFormat"),f.isIn(t,w,"transferFormat"),this._logger.log(s.Trace,"(WebSockets transport) Connecting."),this._accessTokenFactory&&(n=await this._accessTokenFactory()),new Promise((o,i)=>{let c;e=e.replace(/^http/,"ws");const l=this._httpClient.getCookieString(e);let a=!1;if(_.isNode||_.isReactNative){const h={},[g,S]=E();h[g]=S,n&&(h[v.Authorization]=`Bearer ${n}`),l&&(h[v.Cookie]=l),c=new this._webSocketConstructor(e,void 0,{headers:{...h,...this._headers}})}else n&&(e+=(e.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(n)}`);c||(c=new this._webSocketConstructor(e)),t===w.Binary&&(c.binaryType="arraybuffer"),c.onopen=h=>{this._logger.log(s.Information,`WebSocket connected to ${e}.`),this._webSocket=c,a=!0,o()},c.onerror=h=>{let g=null;g=typeof ErrorEvent<"u"&&h instanceof ErrorEvent?h.error:"There was an error with the transport",this._logger.log(s.Information,`(WebSockets transport) ${g}.`)},c.onmessage=h=>{if(this._logger.log(s.Trace,`(WebSockets transport) data received. ${P(h.data,this._logMessageContent)}.`),this.onreceive)try{this.onreceive(h.data)}catch(g){return void this._close(g)}},c.onclose=h=>{if(a)this._close(h);else{let g=null;g=typeof ErrorEvent<"u"&&h instanceof ErrorEvent?h.error:"WebSocket failed to connect. The connection could not be found on the server, either the endpoint may not be a SignalR endpoint, the connection ID is not present on the server, or there is a proxy blocking WebSockets. If you have multiple servers check that sticky sessions are enabled.",i(new Error(g))}}})}send(e){return this._webSocket&&this._webSocket.readyState===this._webSocketConstructor.OPEN?(this._logger.log(s.Trace,`(WebSockets transport) sending data. ${P(e,this._logMessageContent)}.`),this._webSocket.send(e),Promise.resolve()):Promise.reject("WebSocket is not in the OPEN state")}stop(){return this._webSocket&&this._close(void 0),Promise.resolve()}_close(e){this._webSocket&&(this._webSocket.onclose=()=>{},this._webSocket.onmessage=()=>{},this._webSocket.onerror=()=>{},this._webSocket.close(),this._webSocket=void 0),this._logger.log(s.Trace,"(WebSockets transport) socket closed."),this.onclose&&(!this._isCloseEvent(e)||!1!==e.wasClean&&1e3===e.code?e instanceof Error?this.onclose(e):this.onclose():this.onclose(new Error(`WebSocket closed with status code: ${e.code} (${e.reason||"no reason given"}).`)))}_isCloseEvent(e){return e&&"boolean"==typeof e.wasClean&&"number"==typeof e.code}}class _e{constructor(e,t={}){if(this._stopPromiseResolver=()=>{},this.features={},this._negotiateVersion=1,f.isRequired(e,"url"),this._logger=function q(r){return void 0===r?new R(s.Information):null===r?k.instance:void 0!==r.log?r:new R(r)}(t.logger),this.baseUrl=this._resolveUrl(e),(t=t||{}).logMessageContent=void 0!==t.logMessageContent&&t.logMessageContent,"boolean"!=typeof t.withCredentials&&void 0!==t.withCredentials)throw new Error("withCredentials option was not a 'boolean' or 'undefined' value");t.withCredentials=void 0===t.withCredentials||t.withCredentials,t.timeout=void 0===t.timeout?1e5:t.timeout;let n=null,o=null;if(_.isNode){const i=require;n=i("ws"),o=i("eventsource")}!_.isNode&&typeof WebSocket<"u"&&!t.WebSocket?t.WebSocket=WebSocket:_.isNode&&!t.WebSocket&&n&&(t.WebSocket=n),!_.isNode&&typeof EventSource<"u"&&!t.EventSource?t.EventSource=EventSource:_.isNode&&!t.EventSource&&typeof o<"u"&&(t.EventSource=o),this._httpClient=new ue(t.httpClient||new O(this._logger),t.accessTokenFactory),this._connectionState="Disconnected",this._connectionStarted=!1,this._options=t,this.onreceive=null,this.onclose=null}async start(e){if(f.isIn(e=e||w.Binary,w,"transferFormat"),this._logger.log(s.Debug,`Starting connection with transfer format '${w[e]}'.`),"Disconnected"!==this._connectionState)return Promise.reject(new Error("Cannot start an HttpConnection that is not in the 'Disconnected' state."));if(this._connectionState="Connecting",this._startInternalPromise=this._startInternal(e),await this._startInternalPromise,"Disconnecting"===this._connectionState){const t="Failed to start the HttpConnection before stop() was called.";return this._logger.log(s.Error,t),await this._stopPromise,Promise.reject(new y(t))}if("Connected"!==this._connectionState){const t="HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!";return this._logger.log(s.Error,t),Promise.reject(new y(t))}this._connectionStarted=!0}send(e){return"Connected"!==this._connectionState?Promise.reject(new Error("Cannot send data if the connection is not in the 'Connected' State.")):(this._sendQueue||(this._sendQueue=new W(this.transport)),this._sendQueue.send(e))}async stop(e){return"Disconnected"===this._connectionState?(this._logger.log(s.Debug,`Call to HttpConnection.stop(${e}) ignored because the connection is already in the disconnected state.`),Promise.resolve()):"Disconnecting"===this._connectionState?(this._logger.log(s.Debug,`Call to HttpConnection.stop(${e}) ignored because the connection is already in the disconnecting state.`),this._stopPromise):(this._connectionState="Disconnecting",this._stopPromise=new Promise(t=>{this._stopPromiseResolver=t}),await this._stopInternal(e),void await this._stopPromise)}async _stopInternal(e){this._stopError=e;try{await this._startInternalPromise}catch{}if(this.transport){try{await this.transport.stop()}catch(t){this._logger.log(s.Error,`HttpConnection.transport.stop() threw error '${t}'.`),this._stopConnection()}this.transport=void 0}else this._logger.log(s.Debug,"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.")}async _startInternal(e){let t=this.baseUrl;this._accessTokenFactory=this._options.accessTokenFactory,this._httpClient._accessTokenFactory=this._accessTokenFactory;try{if(this._options.skipNegotiation){if(this._options.transport!==p.WebSockets)throw new Error("Negotiation can only be skipped when using the WebSocket transport directly.");this.transport=this._constructTransport(p.WebSockets),await this._startTransport(t,e)}else{let n=null,o=0;do{if(n=await this._getNegotiationResponse(t),"Disconnecting"===this._connectionState||"Disconnected"===this._connectionState)throw new y("The connection was stopped during negotiation.");if(n.error)throw new Error(n.error);if(n.ProtocolVersion)throw new Error("Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.");if(n.url&&(t=n.url),n.accessToken){const i=n.accessToken;this._accessTokenFactory=()=>i,this._httpClient._accessToken=i,this._httpClient._accessTokenFactory=void 0}o++}while(n.url&&o<100);if(100===o&&n.url)throw new Error("Negotiate redirection limit exceeded.");await this._createTransport(t,this._options.transport,n,e)}this.transport instanceof F&&(this.features.inherentKeepAlive=!0),"Connecting"===this._connectionState&&(this._logger.log(s.Debug,"The HttpConnection connected successfully."),this._connectionState="Connected")}catch(n){return this._logger.log(s.Error,"Failed to start the connection: "+n),this._connectionState="Disconnected",this.transport=void 0,this._stopPromiseResolver(),Promise.reject(n)}}async _getNegotiationResponse(e){const t={},[n,o]=E();t[n]=o;const i=this._resolveNegotiateUrl(e);this._logger.log(s.Debug,`Sending negotiation request: ${i}.`);try{const c=await this._httpClient.post(i,{content:"",headers:{...t,...this._options.headers},timeout:this._options.timeout,withCredentials:this._options.withCredentials});if(200!==c.statusCode)return Promise.reject(new Error(`Unexpected status code returned from negotiate '${c.statusCode}'`));const l=JSON.parse(c.content);return(!l.negotiateVersion||l.negotiateVersion<1)&&(l.connectionToken=l.connectionId),l}catch(c){let l="Failed to complete negotiation with the server: "+c;return c instanceof m&&404===c.statusCode&&(l+=" Either this is not a SignalR endpoint or there is a proxy blocking the connection."),this._logger.log(s.Error,l),Promise.reject(new Q(l))}}_createConnectUrl(e,t){return t?e+(-1===e.indexOf("?")?"?":"&")+`id=${t}`:e}async _createTransport(e,t,n,o){let i=this._createConnectUrl(e,n.connectionToken);if(this._isITransport(t))return this._logger.log(s.Debug,"Connection was provided an instance of ITransport, using that directly."),this.transport=t,await this._startTransport(i,o),void(this.connectionId=n.connectionId);const c=[],l=n.availableTransports||[];let a=n;for(const h of l){const g=this._resolveTransportOrError(h,t,o);if(g instanceof Error)c.push(`${h.transport} failed:`),c.push(g);else if(this._isITransport(g)){if(this.transport=g,!a){try{a=await this._getNegotiationResponse(e)}catch(S){return Promise.reject(S)}i=this._createConnectUrl(e,a.connectionToken)}try{return await this._startTransport(i,o),void(this.connectionId=a.connectionId)}catch(S){if(this._logger.log(s.Error,`Failed to start the transport '${h.transport}': ${S}`),a=void 0,c.push(new G(`${h.transport} failed: ${S}`,p[h.transport])),"Connecting"!==this._connectionState){const J="Failed to select transport before stop() was called.";return this._logger.log(s.Debug,J),Promise.reject(new y(J))}}}}return Promise.reject(c.length>0?new Y(`Unable to connect to the server with any of the available transports. ${c.join(" ")}`,c):new Error("None of the transports supported by the client are supported by the server."))}_constructTransport(e){switch(e){case p.WebSockets:if(!this._options.WebSocket)throw new Error("'WebSocket' is not supported in your environment.");return new fe(this._httpClient,this._accessTokenFactory,this._logger,this._options.logMessageContent,this._options.WebSocket,this._options.headers||{});case p.ServerSentEvents:if(!this._options.EventSource)throw new Error("'EventSource' is not supported in your environment.");return new pe(this._httpClient,this._httpClient._accessToken,this._logger,this._options);case p.LongPolling:return new F(this._httpClient,this._logger,this._options);default:throw new Error(`Unknown transport: ${e}.`)}}_startTransport(e,t){return this.transport.onreceive=this.onreceive,this.transport.onclose=n=>this._stopConnection(n),this.transport.connect(e,t)}_resolveTransportOrError(e,t,n){const o=p[e.transport];if(null==o)return this._logger.log(s.Debug,`Skipping transport '${e.transport}' because it is not supported by this client.`),new Error(`Skipping transport '${e.transport}' because it is not supported by this client.`);if(!function we(r,e){return!r||0!=(e&r)}(t,o))return this._logger.log(s.Debug,`Skipping transport '${p[o]}' because it was disabled by the client.`),new K(`'${p[o]}' is disabled by the client.`,o);if(!(e.transferFormats.map(c=>w[c]).indexOf(n)>=0))return this._logger.log(s.Debug,`Skipping transport '${p[o]}' because it does not support the requested transfer format '${w[n]}'.`),new Error(`'${p[o]}' does not support ${w[n]}.`);if(o===p.WebSockets&&!this._options.WebSocket||o===p.ServerSentEvents&&!this._options.EventSource)return this._logger.log(s.Debug,`Skipping transport '${p[o]}' because it is not supported in your environment.'`),new V(`'${p[o]}' is not supported in your environment.`,o);this._logger.log(s.Debug,`Selecting transport '${p[o]}'.`);try{return this._constructTransport(o)}catch(c){return c}}_isITransport(e){return e&&"object"==typeof e&&"connect"in e}_stopConnection(e){if(this._logger.log(s.Debug,`HttpConnection.stopConnection(${e}) called while in state ${this._connectionState}.`),this.transport=void 0,e=this._stopError||e,this._stopError=void 0,"Disconnected"!==this._connectionState){if("Connecting"===this._connectionState)throw this._logger.log(s.Warning,`Call to HttpConnection.stopConnection(${e}) was ignored because the connection is still in the connecting state.`),new Error(`HttpConnection.stopConnection(${e}) was called while the connection is still in the connecting state.`);if("Disconnecting"===this._connectionState&&this._stopPromiseResolver(),e?this._logger.log(s.Error,`Connection disconnected with error '${e}'.`):this._logger.log(s.Information,"Connection disconnected."),this._sendQueue&&(this._sendQueue.stop().catch(t=>{this._logger.log(s.Error,`TransportSendQueue.stop() threw error '${t}'.`)}),this._sendQueue=void 0),this.connectionId=void 0,this._connectionState="Disconnected",this._connectionStarted){this._connectionStarted=!1;try{this.onclose&&this.onclose(e)}catch(t){this._logger.log(s.Error,`HttpConnection.onclose(${e}) threw error '${t}'.`)}}}else this._logger.log(s.Debug,`Call to HttpConnection.stopConnection(${e}) was ignored because the connection is already in the disconnected state.`)}_resolveUrl(e){if(0===e.lastIndexOf("https://",0)||0===e.lastIndexOf("http://",0))return e;if(!_.isBrowser)throw new Error(`Cannot resolve '${e}'.`);const t=window.document.createElement("a");return t.href=e,this._logger.log(s.Information,`Normalizing '${e}' to '${t.href}'.`),t.href}_resolveNegotiateUrl(e){const t=e.indexOf("?");let n=e.substring(0,-1===t?e.length:t);return"/"!==n[n.length-1]&&(n+="/"),n+="negotiate",n+=-1===t?"":e.substring(t),-1===n.indexOf("negotiateVersion")&&(n+=-1===t?"?":"&",n+="negotiateVersion="+this._negotiateVersion),n}}class W{constructor(e){this._transport=e,this._buffer=[],this._executing=!0,this._sendBufferedData=new A,this._transportResult=new A,this._sendLoopPromise=this._sendLoop()}send(e){return this._bufferData(e),this._transportResult||(this._transportResult=new A),this._transportResult.promise}stop(){return this._executing=!1,this._sendBufferedData.resolve(),this._sendLoopPromise}_bufferData(e){if(this._buffer.length&&typeof this._buffer[0]!=typeof e)throw new Error(`Expected data to be of type ${typeof this._buffer} but was of type ${typeof e}`);this._buffer.push(e),this._sendBufferedData.resolve()}async _sendLoop(){for(;;){if(await this._sendBufferedData.promise,!this._executing){this._transportResult&&this._transportResult.reject("Connection stopped.");break}this._sendBufferedData=new A;const e=this._transportResult;this._transportResult=void 0;const t="string"==typeof this._buffer[0]?this._buffer.join(""):W._concatBuffers(this._buffer);this._buffer.length=0;try{await this._transport.send(t),e.resolve()}catch(n){e.reject(n)}}}static _concatBuffers(e){const t=e.map(i=>i.byteLength).reduce((i,c)=>i+c),n=new Uint8Array(t);let o=0;for(const i of e)n.set(new Uint8Array(i),o),o+=i.byteLength;return n.buffer}}class A{constructor(){this.promise=new Promise((e,t)=>[this._resolver,this._rejecter]=[e,t])}resolve(){this._resolver()}reject(e){this._rejecter(e)}}class X{constructor(){this.name="json",this.version=1,this.transferFormat=w.Text}parseMessages(e,t){if("string"!=typeof e)throw new Error("Invalid input for JSON hub protocol. Expected a string.");if(!e)return[];null===t&&(t=k.instance);const n=b.parse(e),o=[];for(const i of n){const c=JSON.parse(i);if("number"!=typeof c.type)throw new Error("Invalid payload.");switch(c.type){case u.Invocation:this._isInvocationMessage(c);break;case u.StreamItem:this._isStreamItemMessage(c);break;case u.Completion:this._isCompletionMessage(c);break;case u.Ping:case u.Close:break;default:t.log(s.Information,"Unknown message type '"+c.type+"' ignored.");continue}o.push(c)}return o}writeMessage(e){return b.write(JSON.stringify(e))}_isInvocationMessage(e){this._assertNotEmptyString(e.target,"Invalid payload for Invocation message."),void 0!==e.invocationId&&this._assertNotEmptyString(e.invocationId,"Invalid payload for Invocation message.")}_isStreamItemMessage(e){if(this._assertNotEmptyString(e.invocationId,"Invalid payload for StreamItem message."),void 0===e.item)throw new Error("Invalid payload for StreamItem message.")}_isCompletionMessage(e){if(e.result&&e.error)throw new Error("Invalid payload for Completion message.");!e.result&&e.error&&this._assertNotEmptyString(e.error,"Invalid payload for Completion message."),this._assertNotEmptyString(e.invocationId,"Invalid payload for Completion message.")}_assertNotEmptyString(e,t){if("string"!=typeof e||""===e)throw new Error(t)}}const me={trace:s.Trace,debug:s.Debug,info:s.Information,information:s.Information,warn:s.Warning,warning:s.Warning,error:s.Error,critical:s.Critical,none:s.None};class Ce{configureLogging(e){if(f.isRequired(e,"logging"),function Se(r){return void 0!==r.log}(e))this.logger=e;else if("string"==typeof e){const t=function ye(r){const e=me[r.toLowerCase()];if(typeof e<"u")return e;throw new Error(`Unknown log level: ${r}`)}(e);this.logger=new R(t)}else this.logger=new R(e);return this}withUrl(e,t){return f.isRequired(e,"url"),f.isNotEmpty(e,"url"),this.url=e,this.httpConnectionOptions="object"==typeof t?{...this.httpConnectionOptions,...t}:{...this.httpConnectionOptions,transport:t},this}withHubProtocol(e){return f.isRequired(e,"protocol"),this.protocol=e,this}withAutomaticReconnect(e){if(this.reconnectPolicy)throw new Error("A reconnectPolicy has already been set.");return this.reconnectPolicy=e?Array.isArray(e)?new B(e):e:new B,this}build(){const e=this.httpConnectionOptions||{};if(void 0===e.logger&&(e.logger=this.logger),!this.url)throw new Error("The 'HubConnectionBuilder.withUrl' method must be called before building the connection.");const t=new _e(this.url,e);return x.create(t,this.logger||k.instance,this.protocol||new X,this.reconnectPolicy)}}return Uint8Array.prototype.indexOf||Object.defineProperty(Uint8Array.prototype,"indexOf",{value:Array.prototype.indexOf,writable:!0}),Uint8Array.prototype.slice||Object.defineProperty(Uint8Array.prototype,"slice",{value:function(r,e){return new Uint8Array(Array.prototype.slice.call(this,r,e))},writable:!0}),Uint8Array.prototype.forEach||Object.defineProperty(Uint8Array.prototype,"forEach",{value:Array.prototype.forEach,writable:!0}),I})());