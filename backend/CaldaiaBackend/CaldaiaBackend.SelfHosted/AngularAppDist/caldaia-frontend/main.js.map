{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/backend.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".layout-topbar {\\r\\n  height: 55px;\\r\\n  background-color: black;\\r\\n  color: white;\\r\\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2), 0 1px 10px 0 rgba(0, 0, 0, 0.12), 0 4px 5px 0 rgba(0, 0, 0, 0.14);\\r\\n  box-sizing: border-box;\\r\\n}\\r\\n\\r\\n.main-content{\\r\\n  background-color: white;\\r\\n  margin-top: 2rem;\\r\\n}\\r\\n\\r\\n.device {\\r\\n  \\r\\n}\\r\\n\\r\\n.monitor {\\r\\n  display: inline-block;\\r\\n  font-family: 'Major Mono Display', monospace;\\r\\n  font-size: 3rem;\\r\\n  width: 100%;\\r\\n  text-align: center;\\r\\n  vertical-align: bottom;\\r\\n}\"","module.exports = \"<div class=\\\"fluid-container\\\">\\n    <div class=\\\"row layout-topbar\\\">\\n        <div class=\\\"col-md-12\\\">\\n            <div class=\\\"col-md-3\\\">&nbsp;</div>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n        <p-toolbar class=\\\"col-md-12\\\">\\n            <div class=\\\"ui-toolbar-group-left\\\">\\n                <button pButton type=\\\"button\\\" class=\\\"ui-button-success\\\" icon=\\\"pi pi-reload\\\" label=\\\"Refresh Data\\\"\\n                    (click)=\\\"refreshData()\\\"></button>\\n                <button pButton type=\\\"button\\\" class=\\\"ui-button-success\\\" icon=\\\"pi pi-reload\\\" label=\\\"Refresh Runtime Settings\\\"\\n                    (click)=\\\"refreshSettings()\\\"></button>\\n            </div>\\n        </p-toolbar>\\n    </div>\\n    <div class=\\\"row justify-content-center main-content\\\">\\n        <div class=\\\"col-md-3 col-lg-3 device\\\">\\n            <p-panel header=\\\"Pannelli Solari\\\">\\n                <div class=\\\"monitor\\\">{{data.rotexTK}}&deg;C<i [ngClass]=\\\"{'pi-spin': data.rotexP1}\\\" [ngStyle]=\\\"{'color': data.rotexP1 ? 'green' : 'gray'}\\\"\\n                        class=\\\"pi pi-cog\\\"></i></div>\\n            </p-panel>\\n        </div>\\n        <div class=\\\"col-md-3 col-lg-3 device\\\">\\n            <p-panel header=\\\"Accumulo Rotex\\\">\\n                <div class=\\\"monitor\\\">{{data.rotexTS}}&deg;C</div>\\n            </p-panel>\\n        </div>\\n        <div class=\\\"col-md-3 col-lg-3 device\\\">\\n            <p-panel header=\\\"Stato Caldaia\\\">\\n                <div class=\\\"monitor\\\"><i [ngClass]=\\\"{'pi-spin': data.outCaldaiaValue}\\\" [ngStyle]=\\\"{'color': data.outCaldaiaValue ? 'green' : 'gray'}\\\"\\n                        class=\\\"pi pi-cog\\\"></i></div>\\n            </p-panel>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-md-2\\\">\\n            <pre>{{data | json}}</pre>\\n        </div>\\n        <div class=\\\"col-md-2\\\">\\n            <pre>{{settings | json}}</pre>\\n        </div>\\n    </div>\\n\\n</div>\\n\\n<p-growl [(value)]=\\\"msgs\\\"></p-growl>\"","import { Component, OnInit, Output, Input } from '@angular/core';\nimport { BackendService } from './backend.service';\nimport { Message } from 'primeng/api';\n\nimport {IDataFromArduino} from './idata-from-arduino';\nimport { ISettingsFromArduino } from './isettings-from-arduino';\n\nimport { environment } from '../environments/environment';\n\ndeclare var $: any; // JQueryStatic;\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  providers: [BackendService]\n})\nexport class AppComponent implements OnInit {\n\n  private _hubConnection: any; // SignalR.Hub.Connection;\n  private dataProxy: any; // SignalR.Hub.Proxy;\n  private settingsProxy: any; // SignalR.Hub.Proxy;\n\n  private signalrBaseUrl = environment.signalrBaseUrl;\n\n  @Output() data: IDataFromArduino = {};\n  @Input() settings: ISettingsFromArduino = {};\n  @Output() msgs: Message[] = [];\n\n  constructor(private _backend: BackendService) { }\n\n  ngOnInit(): void {\n    this._hubConnection = $.hubConnection(this.signalrBaseUrl);\n    this.dataProxy = this._hubConnection.createHubProxy('data');\n    this.settingsProxy = this._hubConnection.createHubProxy('settings');\n\n    this._hubConnection\n      .start()\n      .done(() => console.log('Connection started!'))\n      .catch(err => console.log('Error while establishing connection :('));\n\n    this.dataProxy.on('notify', (payload: any) => {\n      console.log('SignalR: Received data on dataProxy', payload);\n      this.data = payload;\n    });\n\n    this.settingsProxy.on('notify', (payload: any) => {\n      console.log('SignalR: Received data on settingsProxy', payload);\n      this.settings = payload;\n    });\n  }\n\n  public refreshData() {\n    this._backend.updateLatestData().subscribe();\n  }\n\n  public refreshSettings() {\n    this._backend.updateLatestSettings().subscribe();\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\n\nimport { AccordionModule } from 'primeng/primeng';\nimport { PanelModule } from 'primeng/primeng';\nimport { ButtonModule } from 'primeng/primeng';\nimport { RadioButtonModule } from 'primeng/primeng';\nimport { GrowlModule } from 'primeng/primeng';\nimport {ToolbarModule} from 'primeng/toolbar';\n\nimport { AppComponent } from './app.component';\nimport { BackendService } from './backend.service';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    HttpClientModule,\n    AccordionModule,\n    PanelModule,\n    ButtonModule,\n    RadioButtonModule,\n    GrowlModule,\n    ToolbarModule\n  ],\n  providers: [HttpClient, BackendService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n\n}\n","import {Injectable} from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport {IDataFromArduino} from './idata-from-arduino';\nimport { Observable } from 'rxjs';\n\nimport { environment } from '../environments/environment';\n\nconst httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n@Injectable()\nexport class BackendService {\n\n  apiBaseUrl: string = environment.apiBaseUrl;\n  constructor(private http: HttpClient) { }\n\n  public getLatestData(): Observable<IDataFromArduino> {\n    return <Observable<IDataFromArduino>>this.http.get(this.apiBaseUrl + '/queries/latestdata');\n  }\n\n  public updateLatestData() {\n    return this.http.get(this.apiBaseUrl + '/commands/get');\n  }\n\n  public updateLatestSettings() {\n    return this.http.get(this.apiBaseUrl + '/commands/reloadsettings');\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  signalrBaseUrl: 'http://localhost:32767/signalr',\n  apiBaseUrl: 'http://localhost:32767/api'\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}